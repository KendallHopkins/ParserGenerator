<refentry id="{@id}">
 <refnamediv>
  <refname>PHP_ParserGenerator Manual</refname>
  <refpurpose>Introduction to PHP_ParserGenerator</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <authorgroup>
   <author>
    Gregory Beaver
    <authorblurb>
     {@link mailto:cellog@php.net cellog@php.net}
    </authorblurb>
   </author>
  </authorgroup>
 </refsynopsisdiv>
 <refsect1 id="{@id intro}">
  <title>Using PHP_ParserGenerator</title>
  <para>
   PHP_LexerGenerator is a parser generator for PHP 5 based on the Lemon
   parser generator ({@link http://www.hwaci.com/sw/lemon/}).  The simplest
   way to use the parser generator is to use the command-line tool:
  </para>
  <para>
   <screen>
    <![CDATA[
$ phplemon /path/to/Parser.y
    ]]>
   </screen>
  </para>
  <para>
   This will generate files <literal>/path/to/Parser.php</literal> and the
   state information file <literal>/path/to/Parser.out</literal>.
  </para>
  <para>
   Information on the format of <literal>y</literal> files is found in the
   documentation for the {@link http://www.hwaci.com/sw/lemon/ Lemon Parser Generator}.
  </para>
  <para>
   Specific changes made to the grammar file are as follows:
  </para>
  <para>
   <unorderedlist>
    <listitem>
     <para>
      %extra_argument is removed, as class constructor can be used to
      pass in extra information
     </para>
    </listitem>
    <listitem>
     <para>
      %token_type and company are irrelevant in PHP, and so are removed
     </para>
    </listitem>
    <listitem>
     <para>
      %declare_class is added to define the parser class name and any
      implements/extends information
     </para>
    </listitem>
    <listitem>
     <para>
      %include_class is added to allow insertion of extra class information
      such as constants, a class constructor, etc.
     </para>
    </listitem>
   </unorderedlist>
  </para>
  <para>
   Other changes make the parser more robust, and also make reporting
   syntax errors simpler.  Detection of expected tokens eliminates some
   problematic edge cases where an unexpected token could cause the parser
   to simply accept input.
  </para>
  <para>
   Otherwise, the file format is identical to the Lemon parser generator.
  </para>
  <para>
   Generated parsers need a lexer that scans input for tokens such as a lexer
   generated by {@link http://pear.chiaraquartet.net/PHP_LexerGenerator PHP_LexerGenerator}.
   Usage of a generated parser should be something like this:
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
$lex = new lexer(file_get_contents($lexerfile));
$parser = new parser($lex);
while ($lex->yylex()) {
    $parser->doParse($lex->token, $lex->value);
}
$this->parser->doParse(0, 0);
?>
    ]]>
   </programlisting>
  </para>
  <para>
   Especially important is the final passing in of 0 which tells the parser that
   we have reached the end of the input file.
  </para>
  <para>
   Until accepted, the package can be installed with
   <literal>pear install http://pear.chiaraquartet.net/PHP_ParserGenerator/PHP_ParserGenerator-0.1.0.tgz</literal>.
   Direct download link here: {@link http://pear.chiaraquartet.net/PHP_ParserGenerator/PHP_ParserGenerator-0.1.0.tgz}
  </para>
 </refsect1>
</refentry>
